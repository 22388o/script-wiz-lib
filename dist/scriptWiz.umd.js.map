{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/./src/index.ts","webpack://[name]/./src/helper/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","helper","hexNumber","number","numberHexString","toString","length","hexString","data","result","charCodeAt","slice","hexLittleEndian","hex","str","j","startsWith","substring","console","warn","fillStackDataByte","byteInput","byteValue","formattedInput","substr","finalNumberValue","undefined","littleEndianValue","hexNumberValue","parseInt","input","numberValue","byteValueDisplay","fillStackDataNumber","inputNumber","Number","inputHexNumber","littleEndianNumber","fillStackDataString","inputHexString","inputNumberValue","parseInput","finalInput","endsWith","parseInputData","log","isNaN"],"mappings":"0BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,6nBClFrD,cAES,EAAAC,U,4MCAT,IAEMC,EAAY,SAACC,GACjB,IAAIC,EAAkBD,EAAOE,SAAS,IAMtC,OAJID,EAAgBE,OAAS,GAAM,IACjCF,EAAkB,IAAMA,GAGnBA,GAmK8E,EAAAF,YAhKvF,IAAMK,EAAY,SAACC,GACjB,IAAIvC,EAEAwC,EAAS,GACb,IAAKxC,EAAI,EAAGA,EAAIuC,EAAKF,OAAQrC,IAAK,CAEhCwC,IAAW,IADCD,EAAKE,WAAWzC,GAAGoC,SAAS,KAClBM,OAAO,GAG/B,OAAOF,GAuJyF,EAAAF,YApJlG,IAAMK,EAAkB,SAACC,GACvB,GAAIA,EAAIP,OAAS,GAAM,EAAG,CACxB,IAAIQ,EAAM,KACNC,EAAI,EAEJF,EAAIG,WAAW,QACjBD,EAAI,GAGN,IAAK,IAAI9C,EAAI4C,EAAIP,OAAQrC,EAAI8C,EAAG9C,GAAK,EACnC6C,GAAOD,EAAII,UAAUhD,EAAI,EAAGA,GAG9B,OAAO6C,EAGP,OADAI,QAAQC,KAAK,WACN,wBAoI2D,EAAAP,kBAhItE,IAAMQ,EAAoB,SAACC,GAKzB,IAKIC,EALAC,EAAyBF,EACzBA,EAAUf,OAAS,GAAM,IAC3BiB,EAAiBF,EAAUG,OAAO,EAAGH,EAAUf,OAAS,GAAK,IAAMe,EAAUG,OAAOH,EAAUf,OAAS,EAAG,IAI5G,IAAImB,OAAuCC,EAErCC,EAAoBf,EAAgBW,GACpCK,EAAiBC,SAASF,GAOhC,OALIC,GA5Da,YA6DfH,EAAmBG,EACnBN,EAAYM,GACPN,EAAYC,EAEZ,CAAEO,MAAOT,EAAWU,YAAaN,EAAkBH,UAAWC,EAAgBS,iBAAkBV,EAAUjB,aA2G1G,EAAAe,oBAxGT,IAAMa,EAAsB,SAACH,GAM3B,IAIIR,EAJEY,EAAcC,OAAOL,GACrBM,EAAiBlC,EAAUgC,GAC3BG,EAAqBzB,EAAgBwB,GAGvCL,OAAkCL,EAClCM,EAAmBK,EAUvB,OATIH,GAjFa,YAkFfF,EAAmBF,EACnBR,EAAYe,EACZN,EAAcG,IAEdF,EAAmBK,EAAqB,KACxCf,EAAYe,EAAqB,MAG5B,CAAEP,MAAK,EAAEC,YAAW,EAAEC,iBAAgB,EAAEV,UAAS,IAkF9B,EAAAW,sBA/E5B,IAAMK,EAAsB,SAACR,GAK3B,IAAMS,EAAiB,KAAOhC,EAAUuB,GAClCM,EAAiBP,SAASU,GAC5BC,OAAuCd,EAM3C,OAJIU,GAtGa,aAuGfI,EAAmBJ,GAGd,CAAEN,MAAK,EAAER,UAAWiB,EAAgBP,iBAAkBF,EAAOC,YAAaS,IAkElC,EAAAF,sBAA4D,EAAAG,WA/D1F,SAACX,GAClB,IAAIY,OAAahB,EAOjB,GANII,EAAMd,WAAW,MAAQc,EAAMa,SAAS,KAC1CD,EAAaZ,EAAMN,OAAO,EAAGM,EAAMxB,OAAS,GACnCwB,EAAMd,WAAW,SAC1B0B,EAAaZ,GAGXY,EAAY,OAAOE,EAAeF,GAEtC,KAAM,2BAGR,IAAME,EAAiB,SAACd,GAMtB,GAAIA,EAAMd,WAAW,MAGnB,OAFAE,QAAQ2B,IAAI,mBAELzB,EAAkBU,GACpB,GAAKA,EAAMd,WAAW,MAAQc,EAAMa,SAAS,MAAUb,EAAMd,WAAW,MAAQc,EAAMa,SAAS,KAAO,CAG3G,IAAMpB,EAAiBO,EAAMN,OAAO,EAAGM,EAAMxB,OAAS,GACtD,OAAOgC,EAAoBf,GACtB,IAAIO,EAAMd,WAAW,OAGrB,IAAK8B,MAAMhB,GAMhB,MADAZ,QAAQ2B,IAAI,gBACN,0BAHN,OAFA3B,QAAQ2B,IAAI,qBAELZ,EAAoBH,GAM7B,OAXEZ,QAAQ2B,IAAI,iBAWP,CAAEf,MAAO,GAAIR,UAAW,GAAIU,iBAAkB","file":"scriptWiz.umd.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import * as helper from \"./helper\";\n\nexport { helper };\n","import { StackData } from \"../model\";\n\nconst maxInteger = 2147483647;\n\nconst hexNumber = (number: number): string => {\n  let numberHexString = number.toString(16);\n\n  if (numberHexString.length % 2 === 1) {\n    numberHexString = \"0\" + numberHexString;\n  }\n\n  return numberHexString;\n};\n\nconst hexString = (data: string): string => {\n  let i: number;\n\n  let result = \"\";\n  for (i = 0; i < data.length; i++) {\n    const hex = data.charCodeAt(i).toString(16);\n    result += (\"0\" + hex).slice(-2);\n  }\n\n  return result;\n};\n\nconst hexLittleEndian = (hex: string): string => {\n  if (hex.length % 2 === 0) {\n    let str = \"0x\";\n    let j = 0;\n\n    if (hex.startsWith(\"0x\")) {\n      j = 2;\n    }\n\n    for (let i = hex.length; i > j; i -= 2) {\n      str += hex.substring(i - 2, i);\n    }\n\n    return str;\n  } else {\n    console.warn(\"its odd\");\n    return \"something went wrong\";\n  }\n};\n\nconst fillStackDataByte = (byteInput: string): StackData => {\n  // byteInput\n  // 0x1234\n\n  // 0x123 formatted input => 0x1203\n  let formattedInput: string = byteInput;\n  if (byteInput.length % 2 === 1) {\n    formattedInput = byteInput.substr(0, byteInput.length - 1) + \"0\" + byteInput.substr(byteInput.length - 1, 1);\n  }\n\n  let byteValue: number | string;\n  let finalNumberValue: number | undefined = undefined;\n\n  const littleEndianValue = hexLittleEndian(formattedInput);\n  const hexNumberValue = parseInt(littleEndianValue);\n\n  if (hexNumberValue <= maxInteger) {\n    finalNumberValue = hexNumberValue;\n    byteValue = hexNumberValue;\n  } else byteValue = formattedInput;\n\n  return { input: byteInput, numberValue: finalNumberValue, byteValue: formattedInput, byteValueDisplay: byteValue.toString() };\n};\n\nconst fillStackDataNumber = (input: string): StackData => {\n  // input      =>  hexNumber     =>  le           =>  display        =>  byteValueDisplay  => byteValue    => numberValue\n  // 1          =>  0x01          =>  0x01         =>  1              =>  1                 => 0x01         => 1\n  // 2147483647 =>  0x7fffffff    =>  0xffffff7f   =>  2147483647     =>  2147483647        => 0xffffff7f   => 2147483647\n  // 2147483648 =>  0x80000000    =>  0x00000080   =>  0x00000008000  =>  0x0000008000      => 0x0000008000 => undefined\n\n  const inputNumber = Number(input);\n  const inputHexNumber = hexNumber(inputNumber);\n  const littleEndianNumber = hexLittleEndian(inputHexNumber);\n\n  let byteValue: string | number;\n  let numberValue: number | undefined = undefined;\n  let byteValueDisplay = littleEndianNumber;\n  if (inputNumber <= maxInteger) {\n    byteValueDisplay = input;\n    byteValue = littleEndianNumber;\n    numberValue = inputNumber;\n  } else {\n    byteValueDisplay = littleEndianNumber + \"00\";\n    byteValue = littleEndianNumber + \"00\";\n  }\n\n  return { input, numberValue, byteValueDisplay, byteValue };\n};\n\nconst fillStackDataString = (input: string): StackData => {\n  //  input =>  bytevalue   => byteValueDisplay => inputNumber\n  //  ahmet => 0x61686d6574 => ahmet   => 418363827572 // set undefined\n  //  umut  => 0x756d7574   => umut    => 1970107764\n\n  const inputHexString = \"0x\" + hexString(input);\n  const inputHexNumber = parseInt(inputHexString);\n  let inputNumberValue: number | undefined = undefined;\n\n  if (inputHexNumber <= maxInteger) {\n    inputNumberValue = inputHexNumber;\n  }\n\n  return { input, byteValue: inputHexString, byteValueDisplay: input, numberValue: inputNumberValue };\n};\n\nconst parseInput = (input: string): StackData => {\n  let finalInput = undefined;\n  if (input.startsWith(\"<\") && input.endsWith(\">\")) {\n    finalInput = input.substr(1, input.length - 2);\n  } else if (input.startsWith(\"OP_\")) {\n    finalInput = input;\n  }\n\n  if (finalInput) return parseInputData(finalInput);\n\n  throw \"it is not a valid input\";\n};\n\nconst parseInputData = (input: string): StackData => {\n  // 0x1245\n  // \"hello\"\n  // 12\n  // OP_...\n\n  if (input.startsWith(\"0x\")) {\n    console.log(\"byte data input\");\n    // byte data\n    return fillStackDataByte(input);\n  } else if ((input.startsWith('\"') && input.endsWith('\"')) || (input.startsWith(\"'\") && input.endsWith(\"'\"))) {\n    // string data\n\n    const formattedInput = input.substr(1, input.length - 2);\n    return fillStackDataString(formattedInput);\n  } else if (input.startsWith(\"OP_\")) {\n    console.log(\"op data input\");\n    // op functions\n  } else if (!isNaN(input as any)) {\n    console.log(\"number data input\");\n    // number\n    return fillStackDataNumber(input);\n  } else {\n    console.log(\"what happend\");\n    throw \"it is not a valid input\";\n  }\n\n  return { input: \"\", byteValue: \"\", byteValueDisplay: \"\" };\n};\n\n// const hexInput = (input: string): StackData => {\n//   let value: number;\n//   let display: string;\n\n//   if (typeof input === \"number\") {\n//     if (input >= maxInteger) {\n//       display = input;\n//     } else {\n//     }\n//     const hexValue = hexNumber(input);\n//     display = hexLittleEndian(hexValue);\n//     value = input;\n//   } else {\n//     display = input;\n//     // value = hexString(input);\n//   }\n\n//   return { input, value, display };\n// };\n\nexport { fillStackDataByte, fillStackDataNumber, fillStackDataString, hexLittleEndian, hexNumber, hexString, parseInput };\n"],"sourceRoot":""}