{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/./src/helper/index.ts","webpack://[name]/./src/constant/index.ts","webpack://[name]/./src/helper/stackHex.ts","webpack://[name]/./src/helper/stackNumber.ts","webpack://[name]/./src/helper/stackString.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/parse.ts","webpack://[name]/./src/constant/opWordCodes.ts","webpack://[name]/./src/helper/stackOp.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","hexLittleEndian","hex","length","str","j","startsWith","substring","console","warn","opcodeToWord","opcode","find","owc","word","MAX_INTEGER","EMOJI_REGEX","byteInput","byteValue","formattedInput","substr","finalNumberValue","undefined","littleEndianValue","hexNumberValue","parseInt","input","numberValue","byteValueDisplay","toString","stringValue","hexNumber","number","byteLength","x","Math","abs","a","pow","b","getNumberByteLength","numberInput","numberHexString","inputNumber","Number","inputHexNumber","littleEndianNumber","inputHexString","data","result","charCodeAt","slice","hexString","inputNumberValue","stackDataArray","parse","stackDataResult","removeLastSize","push","clearStack","endsWith","log","isNaN","parseFinalInput","OP_ADD","stackData1","stackData2","totalValue","OP_SUB","OP_SUBSTR","stackData3","resultString","firstByte1","firstByte2","stackDataArrayLength"],"mappings":"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","file":"scriptWiz.umd.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import opWordCodes from \"../constant/opWordCodes\";\r\n\r\nconst hexLittleEndian = (hex: string): string => {\r\n  if (hex.length % 2 === 0) {\r\n    let str = \"0x\";\r\n    let j = 0;\r\n\r\n    if (hex.startsWith(\"0x\")) {\r\n      j = 2;\r\n    }\r\n\r\n    for (let i = hex.length; i > j; i -= 2) {\r\n      str += hex.substring(i - 2, i);\r\n    }\r\n\r\n    return str;\r\n  } else {\r\n    console.warn(\"its odd\");\r\n    return \"something went wrong\";\r\n  }\r\n};\r\n\r\n// Surrogates for emoji char code\r\n// const raw = (input: string) => {\r\n//   if (input.length === 1) {\r\n//     return input.charCodeAt(0);\r\n//   }\r\n//   let comp = (input.charCodeAt(0) - 0xd800) * 0x400 + (input.charCodeAt(1) - 0xdc00) + 0x10000;\r\n//   if (comp < 0) {\r\n//     return input.charCodeAt(0);\r\n//   }\r\n//   return comp;\r\n// };\r\n\r\n// const hexInput = (input: string): StackData => {\r\n//   let value: number;\r\n//   let display: string;\r\n\r\n//   if (typeof input === \"number\") {\r\n//     if (input >= maxInteger) {\r\n//       display = input;\r\n//     } else {\r\n//     }\r\n//     const hexValue = hexNumber(input);\r\n//     display = hexLittleEndian(hexValue);\r\n//     value = input;\r\n//   } else {\r\n//     display = input;\r\n//     // value = hexString(input);\r\n//   }\r\n\r\n//   return { input, value, display };\r\n// };\r\n\r\nconst opcodeToWord = (opcode: number) => opWordCodes.find((owc) => owc.opcode === opcode)?.word || \"\";\r\n\r\nexport { hexLittleEndian, opcodeToWord };\r\n","const MAX_INTEGER = 2147483647;\r\nconst EMOJI_REGEX = /([\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2694-\\u2697]|\\uD83E[\\uDD10-\\uDD5D])/g;\r\n\r\nexport { EMOJI_REGEX, MAX_INTEGER };\r\n","import { hexLittleEndian } from \"./index\";\r\nimport { MAX_INTEGER } from \"../constant\";\r\nimport { StackData } from \"../model\";\r\n\r\nconst stackHex = (byteInput: string): StackData => {\r\n  // TO DO\r\n\r\n  // byteInput\r\n  // 0x1234\r\n\r\n  // 0x123 formatted input => 0x1203\r\n  let formattedInput: string = byteInput;\r\n  if (byteInput.length % 2 === 1) {\r\n    formattedInput = byteInput.substr(0, byteInput.length - 1) + \"0\" + byteInput.substr(byteInput.length - 1, 1);\r\n  }\r\n\r\n  let byteValue: number | string;\r\n  let finalNumberValue: number | undefined = undefined;\r\n\r\n  const littleEndianValue = hexLittleEndian(formattedInput);\r\n  const hexNumberValue = parseInt(littleEndianValue);\r\n\r\n  if (hexNumberValue <= MAX_INTEGER) {\r\n    finalNumberValue = hexNumberValue;\r\n    byteValue = hexNumberValue;\r\n  } else byteValue = formattedInput;\r\n\r\n  return {\r\n    input: byteInput,\r\n    numberValue: finalNumberValue,\r\n    byteValue: formattedInput,\r\n    byteValueDisplay: byteValue.toString(),\r\n    stringValue: byteInput,\r\n  };\r\n};\r\n\r\nexport default stackHex;\r\n","import { hexLittleEndian } from \"./index\";\r\nimport { StackData } from \"../model\";\r\nimport { MAX_INTEGER } from \"../constant\";\r\n\r\nconst getNumberByteLength = (x: number): number => {\r\n  /*\r\n    Byte length for number x;\r\n    \r\n    -2147483648 < x < 2147483648;\r\n    n byte\r\n    -1*2^(8n-1) < x <= -1*2^(8(n-1)-1) || 2^(8(n-1)-1) <= x < 2^(8n-1)\r\n\r\n    1 byte:\r\n    n = 1;\r\n    -1*2^(8-1) < x <= -1*2^(0-1) || 2(0-1) <= x < 2^(8-1)\r\n    -1*2^7 < x <= -1*2^(-1) || 2^(-1) <= x < 2'7\r\n    -1*128 < x <= -1*(1/2) || 1/2 <= x < 128\r\n    -128 < x <= -1/2 || 1/2 <= x < 128\r\n\r\n    2 byte:\r\n    n = 2;\r\n    -1*2^(16-1) < x <= -1*2^(8-1) || 2^(8-1) <= x < 2^(16-1)\r\n    -1*2^15 < x <= -1*2^7 || 2^7 <= x < 2^15\r\n    -1*32768 < x <= -1*128 || 128 <= x < 32768\r\n    -32768 < x <= -128 || 128 <= x < 32768\r\n\r\n    3 byte:\r\n    n = 3;\r\n    -1*2^(24-1) < x <= -1*2^(16-1) || 2^(16-1) <= x < 2^(24-1)\r\n    -1*2^23 < x <= -1*2^15 || 2^15 <= x < 2^23\r\n    -1*8388608 < x <= -1*32768 || 32768 <= x < 8388608\r\n    -8388608 < x <= -32768 || 32768 <= x < 8388608\r\n\r\n    4 byte:\r\n    n = 4;\r\n    -1*2^(32-1) < x <= -1*2^(24-1) || 2^(24-1) <= x < 2^(32-1)\r\n    -1*2^31 < x <= -1*2^23 || 2^23 <= x < 2^31\r\n    -1*2147483648 < x <= -1*8388608 || 8388608 <= x < 2147483648\r\n    -2147483648 < x <= -8388608 || 8388608 <= x < 2147483648\r\n*/\r\n  let byteLength = 0;\r\n  if (x === 0) return byteLength;\r\n  const px = Math.abs(x);\r\n  for (let n = 1; n < 5; n++) {\r\n    const a = Math.pow(2, 8 * (n - 1) - 1);\r\n    const b = Math.pow(2, 8 * n - 1);\r\n    if ((-1 * b < x && x <= -1 * a) || (a <= x && x < b)) {\r\n      byteLength = n;\r\n      break;\r\n    }\r\n  }\r\n  return byteLength;\r\n};\r\n\r\nconst hexNumber = (number: number): string => {\r\n  if (number === 0) return \"\";\r\n\r\n  const byteLength = getNumberByteLength(number);\r\n\r\n  let numberInput = number;\r\n  if (number < 0 && byteLength !== 0) numberInput = Math.pow(2, 8 * byteLength - 1) - number;\r\n\r\n  let numberHexString = numberInput.toString(16);\r\n\r\n  if (numberHexString.length % 2 === 1) {\r\n    numberHexString = \"0\" + numberHexString;\r\n  }\r\n\r\n  if (numberHexString.length / 2 < byteLength || byteLength === 0) numberHexString = \"00\" + numberHexString;\r\n\r\n  return numberHexString;\r\n};\r\n\r\nconst stackNumber = (input: string): StackData => {\r\n  // input      =>  hexNumber     =>  le           =>  display        =>  byteValueDisplay  => byteValue    => numberValue\r\n  // 1          =>  0x01          =>  0x01         =>  1              =>  1                 => 0x01         => 1\r\n  // 127        =>  0x7f          =>  0x7f         =>  127            =>  127               => 0x7f         => 127\r\n  // 128        =>  0x80          =>  0x80         =>  128            =>  128               => 0x8000       => 128\r\n  // 255        =>  0xff          =>  0xff00       =>  255            =>  255               => 0xff00       => 255\r\n  // 256        =>  0x0100        =>  0x0001       =>  256            =>  256               => 0x0001       => 256\r\n  // 2147483647 =>  0x7fffffff    =>  0xffffff7f   =>  2147483647     =>  2147483647        => 0xffffff7f   => 2147483647\r\n  // 2147483648 =>  0x80000000    =>  0x00000080   =>  0x00000008000  =>  0x0000008000      => 0x0000008000 => undefined\r\n\r\n  const inputNumber = Number(input);\r\n  const inputHexNumber = hexNumber(inputNumber);\r\n  const littleEndianNumber = hexLittleEndian(inputHexNumber);\r\n\r\n  let numberValue: number | undefined = undefined;\r\n  let byteValueDisplay = littleEndianNumber;\r\n\r\n  if (inputNumber <= MAX_INTEGER) {\r\n    numberValue = inputNumber;\r\n    byteValueDisplay = input;\r\n  }\r\n\r\n  return {\r\n    input,\r\n    numberValue,\r\n    byteValueDisplay,\r\n    byteValue: littleEndianNumber,\r\n  };\r\n};\r\n\r\n/*\r\n<'Test'>\r\n<-2147483647>\r\n<-2147483646>\r\n\r\n\r\n\r\n<-8388609>\r\n<-8388608>\r\n<-8388607>\r\n<-8388606>\r\n\r\n<-32769>\r\n<-32768>\r\n<-32767>\r\n<-32766>\r\n\r\n<-256>\r\n<-255>\r\n\r\n<-129>\r\n<-128>\r\n<-127>\r\n<-126>\r\n\r\n<-2>\r\n<-1>\r\n<0>\r\n<1>\r\n<2>\r\n\r\n<126>\r\n<127>\r\n<128>\r\n<129>\r\n\r\n<255>\r\n<256>\r\n\r\n<32766>\r\n<32767>\r\n<32768>\r\n<32769>\r\n\r\n<8388606>\r\n<8388607>\r\n<8388608>\r\n<8388609>\r\n\r\n<2147483647>\r\n<2147483648>\r\n<2147483649>\r\n*/\r\n\r\nexport default stackNumber;\r\n","import { MAX_INTEGER } from \"../constant\";\r\nimport { StackData } from \"../model\";\r\n\r\nconst hexString = (data: string): string => {\r\n  let i: number;\r\n\r\n  let result = \"\";\r\n  for (i = 0; i < data.length; i++) {\r\n    const hex = data.charCodeAt(i).toString(16);\r\n    result += (\"0\" + hex).slice(-2);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst stackString = (input: string): StackData => {\r\n  //  input =>  bytevalue   => byteValueDisplay => inputNumber\r\n  //  ahmet => 0x61686d6574 => ahmet   => 418363827572 // set undefined\r\n  //  umut  => 0x756d7574   => umut    => 1970107764\r\n\r\n  const inputHexString = \"0x\" + hexString(input);\r\n  const inputHexNumber = parseInt(inputHexString);\r\n  let inputNumberValue: number | undefined = undefined;\r\n\r\n  if (inputHexNumber <= MAX_INTEGER) {\r\n    inputNumberValue = inputHexNumber;\r\n  }\r\n\r\n  return {\r\n    input,\r\n    byteValue: inputHexString,\r\n    byteValueDisplay: input,\r\n    numberValue: inputNumberValue,\r\n    stringValue: input,\r\n  };\r\n};\r\n\r\n// const fillStackDataEmoji = (input: string): StackData => {\r\n//   const byteValueDisplay = input.replace(/'/g, \"\");\r\n//   const charCode = input.charCodeAt(0);\r\n//   return {\r\n//     input,\r\n//     byteValueDisplay,\r\n//     byteValue: \"\",\r\n//   };\r\n// };\r\n\r\nexport default stackString;\r\n","import { StackData, StackDataResult } from \"./model\";\r\nimport parseToStack from \"./parse\";\r\n\r\nlet stackDataArray: StackData[] = [];\r\n\r\nconst parse = (input: string): StackData[] => {\r\n  const stackDataResult: StackDataResult = parseToStack(input, stackDataArray);\r\n  if (stackDataResult.removeLastSize > 0) {\r\n    stackDataArray = stackDataArray.slice(0, stackDataArray.length - stackDataResult.removeLastSize);\r\n  }\r\n  stackDataArray.push(stackDataResult.data);\r\n  return stackDataArray;\r\n};\r\n\r\nconst clearStack = () => {\r\n  stackDataArray = [];\r\n};\r\n\r\nexport { parse, clearStack, stackDataArray };\r\n","import { opcodeToWord } from \"./helper\";\r\nimport stackHex from \"./helper/stackHex\";\r\nimport stackNumber from \"./helper/stackNumber\";\r\nimport OP from \"./helper/stackOp\";\r\nimport stackString from \"./helper/stackString\";\r\nimport { StackData, StackDataResult } from \"./model\";\r\n\r\nconst parseFinalInput = (input: string): StackData => {\r\n  // 0x1245\r\n  // \"hello\"\r\n  // 12\r\n  // OP_...\r\n\r\n  // HEX DATA INPUT\r\n  if (input.startsWith(\"0x\")) {\r\n    console.log(\"byte data input\");\r\n    return stackHex(input);\r\n  }\r\n  // else if (input.match(EMOJI_REGEX)) {\r\n  //   const byteValueDisplay = input.replace(/'/g, \"\");\r\n  //   const charCode = input.charCodeAt(0);\r\n  //   return {\r\n  //     input,\r\n  //     byteValueDisplay,\r\n  //     byteValue: \"\",\r\n  //   };\r\n  // }\r\n  // STRING INPUT\r\n  else if ((input.startsWith('\"') && input.endsWith('\"')) || (input.startsWith(\"'\") && input.endsWith(\"'\"))) {\r\n    // string data\r\n\r\n    const formattedInput = input.substr(1, input.length - 2);\r\n    return stackString(formattedInput);\r\n  }\r\n  // OP_DATA INPUT\r\n  else if (input.startsWith(\"OP_\")) {\r\n    //\r\n    // get number value of OP_ code from const array.\r\n    //\r\n  }\r\n  // NUMBER INPUT\r\n  if (!isNaN(input as any)) {\r\n    console.log(\"number data input\");\r\n    // number\r\n    return stackNumber(input);\r\n  } else {\r\n    console.log(\"what happend\");\r\n    throw \"it is not a valid input\";\r\n  }\r\n\r\n  return { input: \"\", byteValue: \"\", byteValueDisplay: \"\" };\r\n};\r\n\r\nconst parse = (input: string, stackDataArray: StackData[]): StackDataResult => {\r\n  // Data\r\n  if (input.startsWith(\"<\") && input.endsWith(\">\")) {\r\n    const finalInput = input.substr(1, input.length - 2);\r\n    const data = parseFinalInput(finalInput);\r\n    return { data, removeLastSize: 0 };\r\n  }\r\n\r\n  // OP Word or OP Code\r\n  if (input.startsWith(\"OP_\") || !isNaN(input as any)) {\r\n    // OP Word\r\n    let word = input;\r\n    // Op Code\r\n    if (!isNaN(input as any)) {\r\n      word = opcodeToWord(Number(input));\r\n      if (word === \"\") throw \"Unknown OP code number\";\r\n    }\r\n\r\n    return OP(word, stackDataArray);\r\n  }\r\n\r\n  throw \"it is not a valid input script\";\r\n};\r\n\r\nexport default parse;\r\n","const opWordCodes = [\n  { word: \"OP_0\", opcode: 0 },\n  { word: \"OP_FALSE\", opcode: 0 },\n\n  { word: \"OP_CAT\", opcode: 126 },\n  { word: \"OP_SUBSTR\", opcode: 127 },\n  { word: \"OP_ADD\", opcode: 147 },\n  { word: \"OP_SUB\", opcode: 148 },\n];\n\nexport default opWordCodes;\n","import { StackData, StackDataResult } from \"../model\";\r\nimport IStackData from \"../model/IStackData\";\r\nimport stackHex from \"./stackHex\";\r\nimport stackNumber from \"./stackNumber\";\r\nimport stackString from \"./stackString\";\r\n\r\nconst OP_ADD = (stackData1: IStackData, stackData2: IStackData): IStackData => {\r\n  if (stackData1.numberValue !== undefined && stackData2.numberValue !== undefined) {\r\n    const totalValue: number = stackData1.numberValue + stackData2.numberValue;\r\n    return stackNumber(totalValue.toString());\r\n  }\r\n\r\n  throw \"OP_ADD Error: this operation requires 2 valid number data\";\r\n};\r\n\r\nconst OP_SUB = (stackData2: IStackData, stackData1: IStackData): IStackData => {\r\n  if (stackData1.numberValue !== undefined && stackData2.numberValue !== undefined) {\r\n    const totalValue: number = stackData2.numberValue - stackData1.numberValue;\r\n    return stackNumber(totalValue.toString());\r\n  }\r\n\r\n  throw \"OP_SUB Error: this operation requires 2 valid number data\";\r\n};\r\n\r\nconst OP_CAT = (stackData2: IStackData, stackData1: IStackData): IStackData => {\r\n  const byteValue = \"0x\";\r\n  let firstByte1 = stackData2.byteValue.substring(2);\r\n  let firstByte2 = stackData1.byteValue.substring(2);\r\n\r\n  firstByte1 = firstByte1 === \"00\" ? \"\" : firstByte1;\r\n  firstByte2 = firstByte2 === \"00\" ? \"\" : firstByte2;\r\n\r\n  return stackHex(byteValue + firstByte1 + firstByte2);\r\n};\r\n\r\n// stackData 2 index  , stackData 1 size\r\nconst OP_SUBSTR = (stackData3: IStackData, stackData2: IStackData, stackData1: IStackData): IStackData => {\r\n  if (stackData3.stringValue !== undefined) {\r\n    if (stackData2.numberValue !== undefined && stackData1.numberValue !== undefined) {\r\n      const resultString: string = stackData3.stringValue.substr(stackData2.numberValue, stackData1.numberValue);\r\n      return stackString(resultString);\r\n    }\r\n\r\n    throw \"OP_SUBSTR Error: Index and size must be number!\";\r\n  }\r\n\r\n  throw \"OP_SUBSTR Error: Invalid string value for sub string!\";\r\n};\r\n\r\nconst OP = (word: string, stackDataArray: StackData[]): StackDataResult => {\r\n  if (word === \"OP_0\" || word === \"OP_FALSE\") {\r\n    return { data: { byteValue: \"0x00\", input: \"0x00\", numberValue: 0, byteValueDisplay: \"0\" }, removeLastSize: 0 };\r\n  }\r\n  const stackDataArrayLength = stackDataArray.length;\r\n\r\n  if (word === \"OP_ADD\") {\r\n    if (stackDataArrayLength < 2) throw \"OP_ADD Error: stack data array must include min 2 data!\";\r\n    return { data: OP_ADD(stackDataArray[stackDataArrayLength - 2], stackDataArray[stackDataArrayLength - 1]), removeLastSize: 2 };\r\n  }\r\n\r\n  if (word === \"OP_SUB\") {\r\n    if (stackDataArrayLength < 2) throw \"OP_SUB Error: stack data array must include min 2 data!\";\r\n    return { data: OP_SUB(stackDataArray[stackDataArrayLength - 2], stackDataArray[stackDataArrayLength - 1]), removeLastSize: 2 };\r\n  }\r\n\r\n  if (word === \"OP_CAT\") {\r\n    if (stackDataArrayLength < 2) throw \"OP_CAT Error: stack data array must include min 2 data!\";\r\n    return { data: OP_CAT(stackDataArray[stackDataArrayLength - 2], stackDataArray[stackDataArrayLength - 1]), removeLastSize: 2 };\r\n  }\r\n\r\n  if (word === \"OP_SUBSTR\") {\r\n    if (stackDataArrayLength < 3) throw \"OP_SUBSTR Error: stack data array must include min 3 data!\";\r\n    return { data: OP_SUBSTR(stackDataArray[stackDataArrayLength - 3], stackDataArray[stackDataArrayLength - 2], stackDataArray[stackDataArrayLength - 1]), removeLastSize: 3 };\r\n  }\r\n\r\n  throw \"Unknown OP word!\";\r\n};\r\n\r\nexport default OP;\r\n"],"sourceRoot":""}