{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/./src/helper/index.ts","webpack://[name]/./src/constant/index.ts","webpack://[name]/./src/helper/stackHex.ts","webpack://[name]/./src/helper/stackNumber.ts","webpack://[name]/./src/helper/stackString.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/parse.ts","webpack://[name]/./src/constant/opWordCodes.ts","webpack://[name]/./src/helper/stackOp.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","hexLittleEndian","hex","length","str","j","startsWith","substring","console","warn","opcodeToWord","opcode","find","owc","word","opWordToCode","undefined","opWordToHex","MAX_INTEGER","EMOJI_REGEX","hexToNumber","inputHex","byteLenght","hexString","numberHex","Number","availableNumber","boundries","b1","Math","pow","b2","minPos","maxPos","minNeg","maxNeg","hexBoundries","byteInput","byteValue","formattedInput","substr","finalNumberValue","littleEndianValue","hexNumberValue","input","numberValue","byteValueDisplay","toString","stringValue","hexNumber","number","byteLength","x","abs","a","b","getNumberByteLength","numberInput","numberHexString","inputNumber","inputHexNumber","littleEndianNumber","inputHexString","data","result","charCodeAt","slice","parseInt","inputNumberValue","stackDataArray","parse","stackDataResult","removeLastSize","push","clearStack","endsWith","isNaN","parseFinalInput","OP_ADD","stackData1","stackData2","totalValue","OP_SUB","OP_SUBSTR","stackData3","resultString","firstByte1","firstByte2","stackDataArrayLength"],"mappings":"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","file":"scriptWiz.umd.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import opWordCodes from \"../constant/opWordCodes\";\r\n\r\nconst hexLittleEndian = (hex: string): string => {\r\n  if (hex.length % 2 === 0) {\r\n    let str = \"0x\";\r\n    let j = 0;\r\n\r\n    if (hex.startsWith(\"0x\")) {\r\n      j = 2;\r\n    }\r\n\r\n    for (let i = hex.length; i > j; i -= 2) {\r\n      str += hex.substring(i - 2, i);\r\n    }\r\n\r\n    return str;\r\n  } else {\r\n    console.warn(\"its odd\");\r\n    return \"something went wrong\";\r\n  }\r\n};\r\n\r\n// Surrogates for emoji char code\r\n// const raw = (input: string) => {\r\n//   if (input.length === 1) {\r\n//     return input.charCodeAt(0);\r\n//   }\r\n//   let comp = (input.charCodeAt(0) - 0xd800) * 0x400 + (input.charCodeAt(1) - 0xdc00) + 0x10000;\r\n//   if (comp < 0) {\r\n//     return input.charCodeAt(0);\r\n//   }\r\n//   return comp;\r\n// };\r\n\r\n// const hexInput = (input: string): StackData => {\r\n//   let value: number;\r\n//   let display: string;\r\n\r\n//   if (typeof input === \"number\") {\r\n//     if (input >= maxInteger) {\r\n//       display = input;\r\n//     } else {\r\n//     }\r\n//     const hexValue = hexNumber(input);\r\n//     display = hexLittleEndian(hexValue);\r\n//     value = input;\r\n//   } else {\r\n//     display = input;\r\n//     // value = hexString(input);\r\n//   }\r\n\r\n//   return { input, value, display };\r\n// };\r\n\r\nconst opcodeToWord = (opcode: number): string => opWordCodes.find((owc) => owc.opcode === opcode)?.word || \"\";\r\n\r\nconst opWordToCode = (word: string): number => {\r\n  const opcode = opWordCodes.find((owc) => owc.word === word)?.opcode;\r\n  return opcode === undefined ? -1 : opcode;\r\n};\r\n\r\nconst opWordToHex = (word: string): string => {\r\n  const hex = opWordCodes.find((owc) => owc.word === word)?.hex;\r\n  return hex || \"\";\r\n};\r\n\r\nexport { hexLittleEndian, opcodeToWord, opWordToCode, opWordToHex };\r\n","const MAX_INTEGER = 2147483647;\r\nconst EMOJI_REGEX = /([\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2694-\\u2697]|\\uD83E[\\uDD10-\\uDD5D])/g;\r\n\r\nexport { EMOJI_REGEX, MAX_INTEGER };\r\n","import { hexLittleEndian } from \"./index\";\r\nimport { MAX_INTEGER } from \"../constant\";\r\nimport { StackData } from \"../model\";\r\n\r\ninterface NumberBoundries {\r\n  minPos: number;\r\n  maxPos: number;\r\n  minNeg: number;\r\n  maxNeg: number;\r\n}\r\n\r\nconst hexBoundries = (byteLenght: number): NumberBoundries | undefined => {\r\n  // 2^(8n-9) <= x <= 2^(8n-1) - 1\r\n  // -2(8n-9) >= x >= -2^(8n-1) + 1\r\n\r\n  const b1 = Math.pow(2, 8 * byteLenght - 9);\r\n  const b2 = Math.pow(2, 8 * byteLenght - 1);\r\n\r\n  if (0 < byteLenght && byteLenght < 5) {\r\n    return {\r\n      minPos: b1,\r\n      maxPos: b2 - 1,\r\n      minNeg: 1 - b2,\r\n      maxNeg: -1 * b1,\r\n    };\r\n  }\r\n\r\n  return;\r\n};\r\n\r\nconst availableNumber = (hexString: string, byteLenght: number): boolean => {\r\n  // TODO\r\n\r\n  // N/A\r\n\r\n  const numberHex = Number(hexString);\r\n\r\n  // 1 byte\r\n  // n = 0x80\r\n\r\n  // 2 byte\r\n  // 0x0001 <= n <= 0x007f\r\n  // 0x8000 <= n <= 0x807f\r\n\r\n  // 3 byte\r\n  // 0x000001 <= n <= 0x007fff\r\n  // 0x800000 <= n <= 0x807fff\r\n\r\n  // 4 byte\r\n  // 0x00000001 <= n <= 0x007fffff\r\n  // 0x80000000 <= n <= 0x807fffff\r\n\r\n  if (byteLenght === 2)\r\n    if (\r\n      (0x0001 <= numberHex && numberHex <= 0x007f) ||\r\n      (0x8000 <= numberHex && numberHex <= 0x807f)\r\n    )\r\n      return false;\r\n\r\n  return true;\r\n};\r\n\r\nconst hexToNumber = (inputHex: string): number | undefined => {\r\n  const byteLenght = (inputHex.length - 2) / 2;\r\n  if (byteLenght == 0 || 4 < byteLenght) return;\r\n\r\n  if (!availableNumber(inputHex, byteLenght)) return;\r\n\r\n  const numberHex: number = Number(inputHex);\r\n\r\n  const boundries = hexBoundries(byteLenght);\r\n  if (boundries === undefined) return;\r\n\r\n  if (boundries.minPos <= numberHex && numberHex <= boundries.maxPos)\r\n    return numberHex;\r\n\r\n  // if (boundries.minNeg <= numberHex && numberHex <= boundries.maxNeg)\r\n  return Math.pow(2, 8 * byteLenght - 1) - numberHex;\r\n\r\n  // throw \"Hex To Number Error: hex is a available number but not in boundries !\";\r\n};\r\n\r\nconst stackHex = (byteInput: string): StackData => {\r\n  // TO DO\r\n  // Zero check\r\n\r\n  // 1. find hex data length\r\n  // Find\r\n  // byteInput\r\n  // 0x1234\r\n\r\n  // 0x123 formatted input => 0x1203\r\n  let formattedInput: string = byteInput;\r\n  if (byteInput.length % 2 === 1) {\r\n    formattedInput =\r\n      byteInput.substr(0, byteInput.length - 1) +\r\n      \"0\" +\r\n      byteInput.substr(byteInput.length - 1, 1);\r\n  }\r\n\r\n  let byteValue: number | string;\r\n  let finalNumberValue: number | undefined = undefined;\r\n\r\n  const littleEndianValue = hexLittleEndian(formattedInput);\r\n  const hexNumberValue = hexToNumber(littleEndianValue);\r\n\r\n  if (hexNumberValue) {\r\n    finalNumberValue = hexNumberValue;\r\n    if (\r\n      finalNumberValue <= MAX_INTEGER &&\r\n      -1 * MAX_INTEGER <= finalNumberValue\r\n    ) {\r\n      byteValue = hexNumberValue;\r\n    } else {\r\n      finalNumberValue = undefined;\r\n      byteValue = formattedInput;\r\n    }\r\n  } else {\r\n    byteValue = formattedInput;\r\n  }\r\n\r\n  // if (hexNumberValue <= MAX_INTEGER) {\r\n  //   finalNumberValue = hexNumberValue;\r\n  //   byteValue = hexNumberValue;\r\n  // } else byteValue = formattedInput;\r\n\r\n  return {\r\n    input: byteInput,\r\n    numberValue: finalNumberValue,\r\n    byteValue: formattedInput,\r\n    byteValueDisplay: byteValue.toString(),\r\n    stringValue: byteInput,\r\n  };\r\n};\r\n\r\n// 0 byte\r\n// h = 0x              =>      0\r\n\r\n// 1 byte\r\n// 0x01 <= h <= 0x7f     =>      1 <= x <= 127\r\n// 0x81 <= h <= 0xff     =>     -1 >= x >= -127\r\n\r\n// 2 byte\r\n// 0x0080 <= h <= 0x7fff     =>      128 <= x <= 32767\r\n// 0x8080 <= h <= 0xffff     =>     -128 >= x >= -32767\r\n\r\n// 3 byte\r\n// 0x008000 <= h <= 0x7fffff     =>      32768 <= x <= 8388607\r\n// 0x808000 <= h <= 0xffffff     =>     -32768 >= x >= -8388607\r\n\r\n// 4 byte\r\n// 0x00800000 <= h < 0x7fffffff     =>      8388608 <= x <= 2147483647\r\n// 0x80800000 <= h < 0xffffffff     =>     -8388608 >= x >= -2147483647\r\n\r\n// ______________________________________________________________________\r\n\r\n// 1 byte\r\n// n = 0x80\r\n\r\n// 2 byte\r\n// 0x0001 <= n <= 0x007f\r\n// 0x8000 <= n <= 0x807f\r\n\r\n// 3 byte\r\n// 0x000001 <= n <= 0x007fff\r\n// 0x800000 <= n <= 0x807fff\r\n\r\n// 4 byte\r\n// 0x00000001 <= n <= 0x007fffff\r\n// 0x80000000 <= n <= 0x807fffff\r\n\r\n// ________________________________________________________________________\r\n\r\nexport default stackHex;\r\n","import { hexLittleEndian } from \"./index\";\r\nimport { StackData } from \"../model\";\r\nimport { MAX_INTEGER } from \"../constant\";\r\n\r\nconst getNumberByteLength = (x: number): number => {\r\n  /*\r\n    Byte length for number x;\r\n    \r\n    -2147483648 < x < 2147483648;\r\n    n byte\r\n    -1*2^(8n-1) < x <= -1*2^(8(n-1)-1) || 2^(8(n-1)-1) <= x < 2^(8n-1)\r\n\r\n    1 byte:\r\n    n = 1;\r\n    -1*2^(8-1) < x <= -1*2^(0-1) || 2(0-1) <= x < 2^(8-1)\r\n    -1*2^7 < x <= -1*2^(-1) || 2^(-1) <= x < 2'7\r\n    -1*128 < x <= -1*(1/2) || 1/2 <= x < 128\r\n    -128 < x <= -1/2 || 1/2 <= x < 128\r\n\r\n    2 byte:\r\n    n = 2;\r\n    -1*2^(16-1) < x <= -1*2^(8-1) || 2^(8-1) <= x < 2^(16-1)\r\n    -1*2^15 < x <= -1*2^7 || 2^7 <= x < 2^15\r\n    -1*32768 < x <= -1*128 || 128 <= x < 32768\r\n    -32768 < x <= -128 || 128 <= x < 32768\r\n\r\n    3 byte:\r\n    n = 3;\r\n    -1*2^(24-1) < x <= -1*2^(16-1) || 2^(16-1) <= x < 2^(24-1)\r\n    -1*2^23 < x <= -1*2^15 || 2^15 <= x < 2^23\r\n    -1*8388608 < x <= -1*32768 || 32768 <= x < 8388608\r\n    -8388608 < x <= -32768 || 32768 <= x < 8388608\r\n\r\n    4 byte:\r\n    n = 4;\r\n    -1*2^(32-1) < x <= -1*2^(24-1) || 2^(24-1) <= x < 2^(32-1)\r\n    -1*2^31 < x <= -1*2^23 || 2^23 <= x < 2^31\r\n    -1*2147483648 < x <= -1*8388608 || 8388608 <= x < 2147483648\r\n    -2147483648 < x <= -8388608 || 8388608 <= x < 2147483648\r\n*/\r\n  let byteLength = 0;\r\n  if (x === 0) return byteLength;\r\n  const px = Math.abs(x);\r\n  for (let n = 1; n < 5; n++) {\r\n    const a = Math.pow(2, 8 * (n - 1) - 1);\r\n    const b = Math.pow(2, 8 * n - 1);\r\n    if ((-1 * b < x && x <= -1 * a) || (a <= x && x < b)) {\r\n      byteLength = n;\r\n      break;\r\n    }\r\n  }\r\n  return byteLength;\r\n};\r\n\r\nconst hexNumber = (number: number): string => {\r\n  if (number === 0) return \"\";\r\n\r\n  const byteLength = getNumberByteLength(number); // 0,1,2,3,4\r\n\r\n  let numberInput = number;\r\n  if (number < 0 && byteLength !== 0)\r\n    numberInput = Math.pow(2, 8 * byteLength - 1) - number;\r\n\r\n  let numberHexString = numberInput.toString(16);\r\n\r\n  if (numberHexString.length % 2 === 1) {\r\n    numberHexString = \"0\" + numberHexString;\r\n  }\r\n\r\n  if (numberHexString.length / 2 < byteLength || byteLength === 0)\r\n    numberHexString = \"00\" + numberHexString;\r\n\r\n  return numberHexString;\r\n};\r\n\r\nconst stackNumber = (input: string): StackData => {\r\n  // input      =>  hexNumber     =>  le           =>  display        =>  byteValueDisplay  => byteValue    => numberValue\r\n  // 1          =>  0x01          =>  0x01         =>  1              =>  1                 => 0x01         => 1\r\n  // 127        =>  0x7f          =>  0x7f         =>  127            =>  127               => 0x7f         => 127\r\n  // 128        =>  0x80          =>  0x80         =>  128            =>  128               => 0x8000       => 128\r\n  // 255        =>  0xff          =>  0xff00       =>  255            =>  255               => 0xff00       => 255\r\n  // 256        =>  0x0100        =>  0x0001       =>  256            =>  256               => 0x0001       => 256\r\n  // 2147483647 =>  0x7fffffff    =>  0xffffff7f   =>  2147483647     =>  2147483647        => 0xffffff7f   => 2147483647\r\n  // 2147483648 =>  0x80000000    =>  0x00000080   =>  0x00000008000  =>  0x0000008000      => 0x0000008000 => undefined\r\n\r\n  const inputNumber = Number(input);\r\n  const inputHexNumber = hexNumber(inputNumber);\r\n  const littleEndianNumber = hexLittleEndian(inputHexNumber);\r\n\r\n  let numberValue: number | undefined = undefined;\r\n  let byteValueDisplay = littleEndianNumber;\r\n\r\n  if (inputNumber <= MAX_INTEGER) {\r\n    numberValue = inputNumber;\r\n    byteValueDisplay = input;\r\n  }\r\n\r\n  return {\r\n    input,\r\n    numberValue,\r\n    byteValueDisplay,\r\n    byteValue: littleEndianNumber,\r\n  };\r\n};\r\n\r\n/*\r\n<'Test'>\r\n<-2147483647>\r\n<-2147483646>\r\n\r\n\r\n\r\n<-8388609>\r\n<-8388608>\r\n<-8388607>\r\n<-8388606>\r\n\r\n<-32769>\r\n<-32768>\r\n<-32767>\r\n<-32766>\r\n\r\n<-256>\r\n<-255>\r\n\r\n<-129>\r\n<-128>\r\n<-127>\r\n<-126>\r\n\r\n<-2>\r\n<-1>\r\n<0>\r\n<1>\r\n<2>\r\n\r\n<126>\r\n<127>\r\n<128>\r\n<129>\r\n\r\n<255>\r\n<256>\r\n\r\n<32766>\r\n<32767>\r\n<32768>\r\n<32769>\r\n\r\n<8388606>\r\n<8388607>\r\n<8388608>\r\n<8388609>\r\n\r\n<2147483647>\r\n<2147483648>\r\n<2147483649>\r\n*/\r\n\r\nexport default stackNumber;\r\n","import { MAX_INTEGER } from \"../constant\";\r\nimport { StackData } from \"../model\";\r\n\r\nconst hexString = (data: string): string => {\r\n  let i: number;\r\n\r\n  let result = \"\";\r\n  for (i = 0; i < data.length; i++) {\r\n    const hex = data.charCodeAt(i).toString(16);\r\n    result += (\"0\" + hex).slice(-2);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst stackString = (input: string): StackData => {\r\n  //  input =>  bytevalue   => byteValueDisplay => inputNumber\r\n  //  ahmet => 0x61686d6574 => ahmet   => 418363827572 // set undefined\r\n  //  umut  => 0x756d7574   => umut    => 1970107764\r\n\r\n  const inputHexString = \"0x\" + hexString(input);\r\n  const inputHexNumber = parseInt(inputHexString);\r\n  let inputNumberValue: number | undefined = undefined;\r\n\r\n  if (inputHexNumber <= MAX_INTEGER) {\r\n    inputNumberValue = inputHexNumber;\r\n  }\r\n\r\n  return {\r\n    input,\r\n    byteValue: inputHexString,\r\n    byteValueDisplay: input,\r\n    numberValue: inputNumberValue,\r\n    stringValue: input,\r\n  };\r\n};\r\n\r\n// const fillStackDataEmoji = (input: string): StackData => {\r\n//   const byteValueDisplay = input.replace(/'/g, \"\");\r\n//   const charCode = input.charCodeAt(0);\r\n//   return {\r\n//     input,\r\n//     byteValueDisplay,\r\n//     byteValue: \"\",\r\n//   };\r\n// };\r\n\r\nexport default stackString;\r\n","import { StackData, StackDataResult } from \"./model\";\r\nimport parseToStack from \"./parse\";\r\n\r\nlet stackDataArray: StackData[] = [];\r\n\r\nconst parse = (input: string): StackData[] => {\r\n  const stackDataResult: StackDataResult = parseToStack(input, stackDataArray);\r\n  if (stackDataResult.removeLastSize > 0) {\r\n    stackDataArray = stackDataArray.slice(0, stackDataArray.length - stackDataResult.removeLastSize);\r\n  }\r\n  stackDataArray.push(stackDataResult.data);\r\n  return stackDataArray;\r\n};\r\n\r\nconst clearStack = () => {\r\n  stackDataArray = [];\r\n};\r\n\r\nexport { parse, clearStack, stackDataArray };\r\n","import { opcodeToWord, opWordToHex } from \"./helper\";\r\nimport stackHex from \"./helper/stackHex\";\r\nimport stackNumber from \"./helper/stackNumber\";\r\nimport OP from \"./helper/stackOp\";\r\nimport stackString from \"./helper/stackString\";\r\nimport { StackData, StackDataResult } from \"./model\";\r\n\r\nconst parseFinalInput = (input: string): StackData => {\r\n  // 0x1245\r\n  // :D\r\n  // \"hello\"\r\n  // OP_...\r\n  // 12\r\n\r\n  // HEX DATA INPUT\r\n  if (input.startsWith(\"0x\")) {\r\n    return stackHex(input);\r\n  }\r\n\r\n  // EMOJI BY AHMET :)\r\n  // if (input.match(EMOJI_REGEX)) {\r\n  //   const byteValueDisplay = input.replace(/'/g, \"\");\r\n  //   const charCode = input.charCodeAt(0);\r\n  //   return {\r\n  //     input,\r\n  //     byteValueDisplay,\r\n  //     byteValue: \"\",\r\n  //   };\r\n  // }\r\n\r\n  // STRING INPUT\r\n  if ((input.startsWith('\"') && input.endsWith('\"')) || (input.startsWith(\"'\") && input.endsWith(\"'\"))) {\r\n    const formattedInput = input.substr(1, input.length - 2);\r\n    return stackString(formattedInput);\r\n  }\r\n\r\n  // OP_DATA INPUT\r\n  if (input.startsWith(\"OP_\")) {\r\n    const hex = opWordToHex(input);\r\n    if (hex === \"\") throw \"ParseFinalInput Error: it is not a valid op word!\";\r\n    if (hex === \"0x00\") return { byteValue: \"0x00\", input: \"0x00\", byteValueDisplay: \"0\" };\r\n\r\n    return stackHex(hex);\r\n  }\r\n\r\n  // NUMBER INPUT\r\n  if (!isNaN(input as any)) {\r\n    return stackNumber(input);\r\n  }\r\n\r\n  throw \"ParseFinalInput Error: it is not a valid final input string!\";\r\n};\r\n\r\nconst parse = (input: string, stackDataArray: StackData[]): StackDataResult => {\r\n  // Data\r\n  if (input.startsWith(\"<\") && input.endsWith(\">\")) {\r\n    const finalInput = input.substr(1, input.length - 2);\r\n    const data = parseFinalInput(finalInput);\r\n    return { data, removeLastSize: 0 };\r\n  }\r\n\r\n  // OP Word or OP Code\r\n  if (input.startsWith(\"OP_\") || !isNaN(input as any)) {\r\n    // OP Word\r\n    let word = input;\r\n    // Op Code\r\n    if (!isNaN(input as any)) {\r\n      word = opcodeToWord(Number(input));\r\n      if (word === \"\") throw \"Unknown OP code number\";\r\n    }\r\n\r\n    return OP(word, stackDataArray);\r\n  }\r\n\r\n  throw \"it is not a valid input script\";\r\n};\r\n\r\nexport default parse;\r\n","const opWordCodes = [\r\n  { word: \"OP_0\", opcode: 0, hex: \"0x00\" },\r\n  { word: \"OP_FALSE\", opcode: 0, hex: \"0x00\" },\r\n\r\n  { word: \"OP_CAT\", opcode: 126, hex: \"0x7e\" },\r\n  { word: \"OP_SUBSTR\", opcode: 127, hex: \"0x7f\" },\r\n  { word: \"OP_ADD\", opcode: 147, hex: \"0x93\" },\r\n  { word: \"OP_SUB\", opcode: 148, hex: \"0x94\" },\r\n];\r\n\r\nexport default opWordCodes;\r\n","import { StackData, StackDataResult } from \"../model\";\r\nimport IStackData from \"../model/IStackData\";\r\nimport stackHex from \"./stackHex\";\r\nimport stackNumber from \"./stackNumber\";\r\nimport stackString from \"./stackString\";\r\n\r\nconst OP_ADD = (stackData1: IStackData, stackData2: IStackData): IStackData => {\r\n  if (stackData1.numberValue !== undefined && stackData2.numberValue !== undefined) {\r\n    const totalValue: number = stackData1.numberValue + stackData2.numberValue;\r\n    return stackNumber(totalValue.toString());\r\n  }\r\n\r\n  throw \"OP_ADD Error: this operation requires 2 valid number data\";\r\n};\r\n\r\nconst OP_SUB = (stackData2: IStackData, stackData1: IStackData): IStackData => {\r\n  if (stackData1.numberValue !== undefined && stackData2.numberValue !== undefined) {\r\n    const totalValue: number = stackData2.numberValue - stackData1.numberValue;\r\n    return stackNumber(totalValue.toString());\r\n  }\r\n\r\n  throw \"OP_SUB Error: this operation requires 2 valid number data\";\r\n};\r\n\r\nconst OP_CAT = (stackData2: IStackData, stackData1: IStackData): IStackData => {\r\n  const byteValue = \"0x\";\r\n  let firstByte1 = stackData2.byteValue.substring(2);\r\n  let firstByte2 = stackData1.byteValue.substring(2);\r\n\r\n  firstByte1 = firstByte1 === \"00\" ? \"\" : firstByte1;\r\n  firstByte2 = firstByte2 === \"00\" ? \"\" : firstByte2;\r\n\r\n  return stackHex(byteValue + firstByte1 + firstByte2);\r\n};\r\n\r\n// stackData 2 index  , stackData 1 size\r\nconst OP_SUBSTR = (stackData3: IStackData, stackData2: IStackData, stackData1: IStackData): IStackData => {\r\n  if (stackData3.stringValue !== undefined) {\r\n    if (stackData2.numberValue !== undefined && stackData1.numberValue !== undefined) {\r\n      const resultString: string = stackData3.stringValue.substr(stackData2.numberValue, stackData1.numberValue);\r\n      return stackString(resultString);\r\n    }\r\n\r\n    throw \"OP_SUBSTR Error: Index and size must be number!\";\r\n  }\r\n\r\n  throw \"OP_SUBSTR Error: Invalid string value for sub string!\";\r\n};\r\n\r\nconst OP = (word: string, stackDataArray: StackData[]): StackDataResult => {\r\n  if (word === \"OP_0\" || word === \"OP_FALSE\") {\r\n    return { data: { byteValue: \"0x00\", input: \"0x00\", byteValueDisplay: \"0\" }, removeLastSize: 0 };\r\n  }\r\n  const stackDataArrayLength = stackDataArray.length;\r\n\r\n  if (word === \"OP_ADD\") {\r\n    if (stackDataArrayLength < 2) throw \"OP_ADD Error: stack data array must include min 2 data!\";\r\n    return { data: OP_ADD(stackDataArray[stackDataArrayLength - 2], stackDataArray[stackDataArrayLength - 1]), removeLastSize: 2 };\r\n  }\r\n\r\n  if (word === \"OP_SUB\") {\r\n    if (stackDataArrayLength < 2) throw \"OP_SUB Error: stack data array must include min 2 data!\";\r\n    return { data: OP_SUB(stackDataArray[stackDataArrayLength - 2], stackDataArray[stackDataArrayLength - 1]), removeLastSize: 2 };\r\n  }\r\n\r\n  if (word === \"OP_CAT\") {\r\n    if (stackDataArrayLength < 2) throw \"OP_CAT Error: stack data array must include min 2 data!\";\r\n    return { data: OP_CAT(stackDataArray[stackDataArrayLength - 2], stackDataArray[stackDataArrayLength - 1]), removeLastSize: 2 };\r\n  }\r\n\r\n  if (word === \"OP_SUBSTR\") {\r\n    if (stackDataArrayLength < 3) throw \"OP_SUBSTR Error: stack data array must include min 3 data!\";\r\n    return { data: OP_SUBSTR(stackDataArray[stackDataArrayLength - 3], stackDataArray[stackDataArrayLength - 2], stackDataArray[stackDataArrayLength - 1]), removeLastSize: 3 };\r\n  }\r\n\r\n  throw \"Unknown OP word!\";\r\n};\r\n\r\nexport default OP;\r\n"],"sourceRoot":""}