{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/./src/constant/index.ts","webpack://[name]/./src/helper/stackHex.ts","webpack://[name]/./src/helper/index.ts","webpack://[name]/./src/helper/stackNumber.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/parse.ts","webpack://[name]/./src/helper/stackOp.ts","webpack://[name]/./src/helper/stackString.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","MAX_INTEGER","EMOJI_REGEX","byteInput","byteValue","formattedInput","length","substr","finalNumberValue","undefined","littleEndianValue","hexLittleEndian","hexNumberValue","parseInt","input","numberValue","byteValueDisplay","toString","hex","str","j","startsWith","substring","console","warn","hexNumber","number","byteLength","x","Math","abs","a","pow","b","getNumberByteLength","numberInput","numberHexString","inputNumber","Number","inputHexNumber","littleEndianNumber","stackDataArray","parse","stackDataResult","removeLastTwo","slice","push","data","clearStack","endsWith","log","isNaN","parseFinalInput","sLength","opCode","stackData1","stackData2","totalValue","error","OP_ADD","OP_SUB","OP_CAT","inputHexString","result","charCodeAt","hexString","inputNumberValue"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","const MAX_INTEGER = 2147483647;\nconst EMOJI_REGEX = /([\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2694-\\u2697]|\\uD83E[\\uDD10-\\uDD5D])/g;\n\nexport { EMOJI_REGEX, MAX_INTEGER };\n","import { hexLittleEndian } from \"./index\";\nimport { MAX_INTEGER } from \"../constant\";\nimport { StackData } from \"../model\";\n\nconst stackHex = (byteInput: string): StackData => {\n  // byteInput\n  // 0x1234\n\n  // 0x123 formatted input => 0x1203\n  let formattedInput: string = byteInput;\n  if (byteInput.length % 2 === 1) {\n    formattedInput = byteInput.substr(0, byteInput.length - 1) + \"0\" + byteInput.substr(byteInput.length - 1, 1);\n  }\n\n  let byteValue: number | string;\n  let finalNumberValue: number | undefined = undefined;\n\n  const littleEndianValue = hexLittleEndian(formattedInput);\n  const hexNumberValue = parseInt(littleEndianValue);\n\n  if (hexNumberValue <= MAX_INTEGER) {\n    finalNumberValue = hexNumberValue;\n    byteValue = hexNumberValue;\n  } else byteValue = formattedInput;\n\n  return {\n    input: byteInput,\n    numberValue: finalNumberValue,\n    byteValue: formattedInput,\n    byteValueDisplay: byteValue.toString(),\n  };\n};\n\nexport default stackHex;\n","const hexLittleEndian = (hex: string): string => {\r\n  if (hex.length % 2 === 0) {\r\n    let str = \"0x\";\r\n    let j = 0;\r\n\r\n    if (hex.startsWith(\"0x\")) {\r\n      j = 2;\r\n    }\r\n\r\n    for (let i = hex.length; i > j; i -= 2) {\r\n      str += hex.substring(i - 2, i);\r\n    }\r\n\r\n    return str;\r\n  } else {\r\n    console.warn(\"its odd\");\r\n    return \"something went wrong\";\r\n  }\r\n};\r\n\r\n// Surrogates for emoji char code\r\n// const raw = (input: string) => {\r\n//   if (input.length === 1) {\r\n//     return input.charCodeAt(0);\r\n//   }\r\n//   let comp = (input.charCodeAt(0) - 0xd800) * 0x400 + (input.charCodeAt(1) - 0xdc00) + 0x10000;\r\n//   if (comp < 0) {\r\n//     return input.charCodeAt(0);\r\n//   }\r\n//   return comp;\r\n// };\r\n\r\n// const hexInput = (input: string): StackData => {\r\n//   let value: number;\r\n//   let display: string;\r\n\r\n//   if (typeof input === \"number\") {\r\n//     if (input >= maxInteger) {\r\n//       display = input;\r\n//     } else {\r\n//     }\r\n//     const hexValue = hexNumber(input);\r\n//     display = hexLittleEndian(hexValue);\r\n//     value = input;\r\n//   } else {\r\n//     display = input;\r\n//     // value = hexString(input);\r\n//   }\r\n\r\n//   return { input, value, display };\r\n// };\r\n\r\nexport { hexLittleEndian };\r\n","import { hexLittleEndian } from \"./index\";\r\nimport { StackData } from \"../model\";\r\nimport { MAX_INTEGER } from \"../constant\";\r\n\r\nconst getNumberByteLength = (x: number): number => {\r\n  /*\r\n    Byte length for number x;\r\n    \r\n    -2147483648 < x < 2147483648;\r\n    n byte\r\n    -1*2^(8n-1) < x <= -1*2^(8(n-1)-1) || 2^(8(n-1)-1) <= x < 2^(8n-1)\r\n\r\n    1 byte:\r\n    n = 1;\r\n    -1*2^(8-1) < x <= -1*2^(0-1) || 2(0-1) <= x < 2^(8-1)\r\n    -1*2^7 < x <= -1*2^(-1) || 2^(-1) <= x < 2'7\r\n    -1*128 < x <= -1*(1/2) || 1/2 <= x < 128\r\n    -128 < x <= -1/2 || 1/2 <= x < 128\r\n\r\n    2 byte:\r\n    n = 2;\r\n    -1*2^(16-1) < x <= -1*2^(8-1) || 2^(8-1) <= x < 2^(16-1)\r\n    -1*2^15 < x <= -1*2^7 || 2^7 <= x < 2^15\r\n    -1*32768 < x <= -1*128 || 128 <= x < 32768\r\n    -32768 < x <= -128 || 128 <= x < 32768\r\n\r\n    3 byte:\r\n    n = 3;\r\n    -1*2^(24-1) < x <= -1*2^(16-1) || 2^(16-1) <= x < 2^(24-1)\r\n    -1*2^23 < x <= -1*2^15 || 2^15 <= x < 2^23\r\n    -1*8388608 < x <= -1*32768 || 32768 <= x < 8388608\r\n    -8388608 < x <= -32768 || 32768 <= x < 8388608\r\n\r\n    4 byte:\r\n    n = 4;\r\n    -1*2^(32-1) < x <= -1*2^(24-1) || 2^(24-1) <= x < 2^(32-1)\r\n    -1*2^31 < x <= -1*2^23 || 2^23 <= x < 2^31\r\n    -1*2147483648 < x <= -1*8388608 || 8388608 <= x < 2147483648\r\n    -2147483648 < x <= -8388608 || 8388608 <= x < 2147483648\r\n*/\r\n  let byteLength = 0;\r\n  if (x === 0) return byteLength;\r\n  const px = Math.abs(x);\r\n  for (let n = 1; n < 5; n++) {\r\n    const a = Math.pow(2, 8 * (n - 1) - 1);\r\n    const b = Math.pow(2, 8 * n - 1);\r\n    if ((-1 * b < x && x <= -1 * a) || (a <= x && x < b)) {\r\n      byteLength = n;\r\n      break;\r\n    }\r\n  }\r\n  return byteLength;\r\n};\r\n\r\nconst hexNumber = (number: number): string => {\r\n  if (number === 0) return \"\";\r\n\r\n  const byteLength = getNumberByteLength(number);\r\n\r\n  let numberInput = number;\r\n  if (number < 0 && byteLength !== 0) numberInput = Math.pow(2, 8 * byteLength - 1) - number;\r\n\r\n  let numberHexString = numberInput.toString(16);\r\n\r\n  if (numberHexString.length % 2 === 1) {\r\n    numberHexString = \"0\" + numberHexString;\r\n  }\r\n\r\n  if (numberHexString.length / 2 < byteLength || byteLength === 0) numberHexString = \"00\" + numberHexString;\r\n\r\n  return numberHexString;\r\n};\r\n\r\nconst stackNumber = (input: string): StackData => {\r\n  // input      =>  hexNumber     =>  le           =>  display        =>  byteValueDisplay  => byteValue    => numberValue\r\n  // 1          =>  0x01          =>  0x01         =>  1              =>  1                 => 0x01         => 1\r\n  // 127        =>  0x7f          =>  0x7f         =>  127            =>  127               => 0x7f         => 127\r\n  // 128        =>  0x80          =>  0x80         =>  128            =>  128               => 0x8000       => 128\r\n  // 255        =>  0xff          =>  0xff00       =>  255            =>  255               => 0xff00       => 255\r\n  // 256        =>  0x0100        =>  0x0001       =>  256            =>  256               => 0x0001       => 256\r\n  // 2147483647 =>  0x7fffffff    =>  0xffffff7f   =>  2147483647     =>  2147483647        => 0xffffff7f   => 2147483647\r\n  // 2147483648 =>  0x80000000    =>  0x00000080   =>  0x00000008000  =>  0x0000008000      => 0x0000008000 => undefined\r\n\r\n  const inputNumber = Number(input);\r\n  const inputHexNumber = hexNumber(inputNumber);\r\n  const littleEndianNumber = hexLittleEndian(inputHexNumber);\r\n\r\n  let numberValue: number | undefined = undefined;\r\n  let byteValueDisplay = littleEndianNumber;\r\n\r\n  if (inputNumber <= MAX_INTEGER) {\r\n    numberValue = inputNumber;\r\n    byteValueDisplay = input;\r\n  }\r\n\r\n  return {\r\n    input,\r\n    numberValue,\r\n    byteValueDisplay,\r\n    byteValue: littleEndianNumber,\r\n  };\r\n};\r\n\r\n/*\r\n<'Test'>\r\n<-2147483647>\r\n<-2147483646>\r\n\r\n\r\n\r\n<-8388609>\r\n<-8388608>\r\n<-8388607>\r\n<-8388606>\r\n\r\n<-32769>\r\n<-32768>\r\n<-32767>\r\n<-32766>\r\n\r\n<-256>\r\n<-255>\r\n\r\n<-129>\r\n<-128>\r\n<-127>\r\n<-126>\r\n\r\n<-2>\r\n<-1>\r\n<0>\r\n<1>\r\n<2>\r\n\r\n<126>\r\n<127>\r\n<128>\r\n<129>\r\n\r\n<255>\r\n<256>\r\n\r\n<32766>\r\n<32767>\r\n<32768>\r\n<32769>\r\n\r\n<8388606>\r\n<8388607>\r\n<8388608>\r\n<8388609>\r\n\r\n<2147483647>\r\n<2147483648>\r\n<2147483649>\r\n*/\r\n\r\nexport default stackNumber;\r\n","import { StackData, StackDataResult } from \"./model\";\nimport parseToStack from \"./parse\";\n\nlet stackDataArray: StackData[] = [];\n\nconst parse = (input: string): StackData[] => {\n  const stackDataResult: StackDataResult = parseToStack(input, stackDataArray);\n  if (stackDataResult.removeLastTwo) {\n    stackDataArray = stackDataArray.slice(0, stackDataArray.length - 2);\n  }\n  stackDataArray.push(stackDataResult.data);\n  return stackDataArray;\n};\n\nconst clearStack = () => {\n  stackDataArray = [];\n};\n\nexport { parse, clearStack, stackDataArray };\n","import stackHex from \"./helper/stackHex\";\nimport stackNumber from \"./helper/stackNumber\";\nimport OP from \"./helper/stackOp\";\nimport stackString from \"./helper/stackString\";\nimport { StackData, StackDataResult } from \"./model\";\n\nconst parseFinalInput = (input: string): StackData => {\n  // 0x1245\n  // \"hello\"\n  // 12\n  // OP_...\n\n  if (input.startsWith(\"0x\")) {\n    console.log(\"byte data input\");\n    // byte data\n    return stackHex(input);\n  }\n  // else if (input.match(EMOJI_REGEX)) {\n  //   const byteValueDisplay = input.replace(/'/g, \"\");\n  //   const charCode = input.charCodeAt(0);\n  //   return {\n  //     input,\n  //     byteValueDisplay,\n  //     byteValue: \"\",\n  //   };\n  // }\n  else if ((input.startsWith('\"') && input.endsWith('\"')) || (input.startsWith(\"'\") && input.endsWith(\"'\"))) {\n    // string data\n\n    const formattedInput = input.substr(1, input.length - 2);\n    return stackString(formattedInput);\n  } else if (!isNaN(input as any)) {\n    console.log(\"number data input\");\n    // number\n    return stackNumber(input);\n  } else {\n    console.log(\"what happend\");\n    throw \"it is not a valid input\";\n  }\n\n  return { input: \"\", byteValue: \"\", byteValueDisplay: \"\" };\n};\n\nconst parse = (input: string, stackDataArray: StackData[]): StackDataResult => {\n  let data: StackData;\n  let removeLastTwo = false;\n\n  if (input.startsWith(\"<\") && input.endsWith(\">\")) {\n    const finalInput = input.substr(1, input.length - 2);\n    data = parseFinalInput(finalInput);\n  } else if (input.startsWith(\"OP_\")) {\n    const sLength = stackDataArray.length;\n    if (sLength < 2) throw \"Empty stack error\";\n    data = OP(input, stackDataArray[sLength - 2], stackDataArray[sLength - 1]);\n    removeLastTwo = true;\n  } else {\n    throw \"it is not a valid input or OP code\";\n  }\n\n  return { data, removeLastTwo };\n};\n\nexport default parse;\n","import IStackData from \"../model/IStackData\";\nimport stackHex from \"./stackHex\";\nimport stackNumber from \"./stackNumber\";\n\nconst OP_ADD = (stackData1: IStackData, stackData2: IStackData): IStackData => {\n  if (stackData1.numberValue && stackData2.numberValue) {\n    const totalValue: number = stackData1.numberValue + stackData2.numberValue;\n    return stackNumber(totalValue.toString());\n  } else {\n    console.error(\"Invalid input: this operation requires a valid Script Number.\");\n    throw \"Invalid input: this operation requires a valid Script Number.\";\n  }\n};\n\nconst OP_CAT = (stackData1: IStackData, stackData2: IStackData): IStackData => {\n  const byteValue = \"0x\" + stackData1.byteValue.substring(2) + stackData2.byteValue.substring(2);\n  return stackHex(byteValue);\n};\n\nconst OP_SUB = (stackData1: IStackData, stackData2: IStackData): IStackData => {\n  if (stackData1.numberValue && stackData2.numberValue) {\n    const totalValue: number = stackData1.numberValue - stackData2.numberValue;\n    return stackNumber(totalValue.toString());\n  } else {\n    console.error(\"Invalid input: this operation requires a valid Script Number.\");\n    throw \"Invalid input: this operation requires a valid Script Number.\";\n  }\n};\n\nconst OP = (opCode: string, stackData1: IStackData, stackData2: IStackData): IStackData => {\n  if (opCode === \"OP_ADD\") {\n    return OP_ADD(stackData1, stackData2);\n  } else if (opCode === \"OP_SUB\") {\n    return OP_SUB(stackData1, stackData2);\n  } else if (opCode === \"OP_CAT\") {\n    return OP_CAT(stackData1, stackData2);\n  } else {\n    throw \"Invalid OP code!\";\n  }\n};\n\nexport default OP;\n","import { MAX_INTEGER } from \"../constant\";\nimport { StackData } from \"../model\";\n\nconst hexString = (data: string): string => {\n  let i: number;\n\n  let result = \"\";\n  for (i = 0; i < data.length; i++) {\n    const hex = data.charCodeAt(i).toString(16);\n    result += (\"0\" + hex).slice(-2);\n  }\n\n  return result;\n};\n\nconst stackString = (input: string): StackData => {\n  //  input =>  bytevalue   => byteValueDisplay => inputNumber\n  //  ahmet => 0x61686d6574 => ahmet   => 418363827572 // set undefined\n  //  umut  => 0x756d7574   => umut    => 1970107764\n\n  const inputHexString = \"0x\" + hexString(input);\n  const inputHexNumber = parseInt(inputHexString);\n  let inputNumberValue: number | undefined = undefined;\n\n  if (inputHexNumber <= MAX_INTEGER) {\n    inputNumberValue = inputHexNumber;\n  }\n\n  return {\n    input,\n    byteValue: inputHexString,\n    byteValueDisplay: input,\n    numberValue: inputNumberValue,\n  };\n};\n\n// const fillStackDataEmoji = (input: string): StackData => {\n//   const byteValueDisplay = input.replace(/'/g, \"\");\n//   const charCode = input.charCodeAt(0);\n//   return {\n//     input,\n//     byteValueDisplay,\n//     byteValue: \"\",\n//   };\n// };\n\nexport default stackString;\n"],"sourceRoot":""}